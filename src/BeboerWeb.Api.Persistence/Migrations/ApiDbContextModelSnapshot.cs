// <auto-generated />
using System;
using BeboerWeb.Api.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BeboerWeb.Api.Persistence.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AddressProperty", b =>
                {
                    b.Property<int>("AddressesId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesId")
                        .HasColumnType("int");

                    b.HasKey("AddressesId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("AddressProperty", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.Bookings.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TenantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.Bookings.BookingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("BookingItems", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.Bookings.BookingWindow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("BookingWindows", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Type")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(85)
                        .HasColumnType("nvarchar(85)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Zipcode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Lease", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Apartment")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("PropertyId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Story")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("PropertyId");

                    b.ToTable("Leases", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.LeasePeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LesseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LesseId");

                    b.ToTable("LeasePeriods", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Property", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Tenant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("Balance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Tenants", (string)null);
                });

            modelBuilder.Entity("BookingBookingItem", b =>
                {
                    b.Property<int>("BookingItemsId")
                        .HasColumnType("int");

                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.HasKey("BookingItemsId", "BookingsId");

                    b.HasIndex("BookingsId");

                    b.ToTable("BookingBookingItem", (string)null);
                });

            modelBuilder.Entity("BookingDocument", b =>
                {
                    b.Property<int>("BookingsId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentsId")
                        .HasColumnType("int");

                    b.HasKey("BookingsId", "DocumentsId");

                    b.HasIndex("DocumentsId");

                    b.ToTable("BookingDocument", (string)null);
                });

            modelBuilder.Entity("BookingItemBookingWindow", b =>
                {
                    b.Property<int>("BookingItemsId")
                        .HasColumnType("int");

                    b.Property<int>("BookingWindowsId")
                        .HasColumnType("int");

                    b.HasKey("BookingItemsId", "BookingWindowsId");

                    b.HasIndex("BookingWindowsId");

                    b.ToTable("BookingItemBookingWindow", (string)null);
                });

            modelBuilder.Entity("CompanyEmployee", b =>
                {
                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("CompaniesId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("CompanyEmployee", (string)null);
                });

            modelBuilder.Entity("CompanyProperty", b =>
                {
                    b.Property<int>("CompaniesId")
                        .HasColumnType("int");

                    b.Property<int>("PropertiesId")
                        .HasColumnType("int");

                    b.HasKey("CompaniesId", "PropertiesId");

                    b.HasIndex("PropertiesId");

                    b.ToTable("CompanyProperty", (string)null);
                });

            modelBuilder.Entity("DocumentLeasePeriod", b =>
                {
                    b.Property<int>("DocumentsId")
                        .HasColumnType("int");

                    b.Property<int>("LeasePeriodsId")
                        .HasColumnType("int");

                    b.HasKey("DocumentsId", "LeasePeriodsId");

                    b.HasIndex("LeasePeriodsId");

                    b.ToTable("DocumentLeasePeriod", (string)null);
                });

            modelBuilder.Entity("LeasePeriodTenant", b =>
                {
                    b.Property<int>("LeasePeriodsId")
                        .HasColumnType("int");

                    b.Property<int>("TenantsId")
                        .HasColumnType("int");

                    b.HasKey("LeasePeriodsId", "TenantsId");

                    b.HasIndex("TenantsId");

                    b.ToTable("LeasePeriodTenant", (string)null);
                });

            modelBuilder.Entity("AddressProperty", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Address", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.Bookings.Booking", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Tenant", null)
                        .WithMany("Bookings")
                        .HasForeignKey("TenantId");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Address", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.City", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Lease", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Address", "Address")
                        .WithMany("Leases")
                        .HasForeignKey("AddressId");

                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Property", "Property")
                        .WithMany("Lesses")
                        .HasForeignKey("PropertyId");

                    b.Navigation("Address");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.LeasePeriod", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Lease", "Lesse")
                        .WithMany("LessePeriods")
                        .HasForeignKey("LesseId");

                    b.Navigation("Lesse");
                });

            modelBuilder.Entity("BookingBookingItem", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.Bookings.BookingItem", null)
                        .WithMany()
                        .HasForeignKey("BookingItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.Bookings.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingDocument", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.Bookings.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.Documents.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookingItemBookingWindow", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.Bookings.BookingItem", null)
                        .WithMany()
                        .HasForeignKey("BookingItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.Bookings.BookingWindow", null)
                        .WithMany()
                        .HasForeignKey("BookingWindowsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyEmployee", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CompanyProperty", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Property", null)
                        .WithMany()
                        .HasForeignKey("PropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DocumentLeasePeriod", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.Documents.Document", null)
                        .WithMany()
                        .HasForeignKey("DocumentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.LeasePeriod", null)
                        .WithMany()
                        .HasForeignKey("LeasePeriodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LeasePeriodTenant", b =>
                {
                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.LeasePeriod", null)
                        .WithMany()
                        .HasForeignKey("LeasePeriodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BeboerWeb.Api.Domain.Models.PropertyManangement.Tenant", null)
                        .WithMany()
                        .HasForeignKey("TenantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Address", b =>
                {
                    b.Navigation("Leases");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Country", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Lease", b =>
                {
                    b.Navigation("LessePeriods");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Property", b =>
                {
                    b.Navigation("Lesses");
                });

            modelBuilder.Entity("BeboerWeb.Api.Domain.Models.PropertyManangement.Tenant", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
